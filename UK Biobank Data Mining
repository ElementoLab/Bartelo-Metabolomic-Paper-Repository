First we read in the columns we want for our dataframe to be able to diagnose prediabetes. 
The first step here contains all the information for doctor diagnosis, age of diagnosis, gestational diabetics, and dates the blood was drawn.
first_step = pd.read_csv('~/whole_file_26867', usecols = ['eid', '74-0.0', '74-1.0', '74-2.0', '2443-0.0', '2443-1.0', '2443-2.0', '2976-0.0', '2976-1.0', '2976-2.0', '4041-0.0', '4041-1.0', '4041-2.0', '53-0.0', '53-1.0', '53-2.0'])

The second step here contains all the columns that contain the tests used to diagnose a prediabetic patient - HbA1c and Blood Glucose.
HbA1c is a standard measure for the classification of prediabetic patients, with patients scoring 42 mmol/mol - 47 mmol/mol in the prediabetic range.
Blood Glucose can also be used to classify prediabetic patients. The range for prediabetic patients for fasting blood glucose level is 5.6 mmol/L - 7.0 mmol/L. 
second_step = pd.read_csv('~/whole_file_42385', usecols = ['eid', '30740-0.0', '30740-1.0', '30741-0.0', '30741-1.0', '30750-0.0', '30750-1.0', '30751-0.0', '30751-1.0'])

The third step here contains all the columns that correspond to a self-diagnosis of diabetes. 
third_step = pd.read_csv('~/whole_file_33822', usecols = ['eid', '20002-0.0','20002-0.1', '20002-0.2', '20002-0.3', '20002-0.4', '20002-0.5', '20002-0.6', '20002-0.7', '20002-0.8', '20002-0.9', '20002-0.10', '20002-0.11', '20002-0.12', '20002-0.13', '20002-0.14', '20002-0.15', '20002-0.16', '20002-0.17', '20002-0.18', '20002-0.19', '20002-0.20', '20002-0.21', '20002-0.22', '20002-0.23', '20002-0.24', '20002-0.25', '20002-0.26', '20002-0.27', '20002-0.28', '20002-0.29', '20002-0.30', '20002-0.31', '20002-0.32', '20002-0.33', '20002-1.0', '20002-1.1', '20002-1.2', '20002-1.3', '20002-1.4', '20002-1.5', '20002-1.6', '20002-1.7', '20002-1.8', '20002-1.9', '20002-1.10','20002-1.11', '20002-1.12', '20002-1.13', '20002-1.14', '20002-1.15', '20002-1.16', '20002-1.17', '20002-1.18', '20002-1.19', '20002-1.20', '20002-1.21', '20002-1.22', '20002-1.23', '20002-1.24', '20002-1.25', '20002-1.26', '20002-1.27', '20002-1.28', '20002-1.29', '20002-1.30', '20002-1.31', '20002-1.32', '20002-1.33', '20002-2.0', '20002-2.1', '20002-2.2', '20002-2.3', '20002-2.4', '20002-2.5', '20002-2.6', '20002-2.7', '20002-2.8', '20002-2.9', '20002-2.10','20002-2.11', '20002-2.12', '20002-2.13', '20002-2.14', '20002-2.15', '20002-2.16', '20002-2.17', '20002-2.18', '20002-2.19', '20002-2.20', '20002-2.21', '20002-2.22', '20002-2.23', '20002-2.24', '20002-2.25', '20002-2.26', '20002-2.27', '20002-2.28', '20002-2.29', '20002-2.30', '20002-2.31', '20002-2.32', '20002-2.33'])

Now we can merge these dataframes by eid (patient number).
merged_prediabetes_information = first_step.merge(second_step, on = 'eid').merge(third_step, on = 'eid')

Finally we can write this dataframe to a csv so that we can import it to our desktop using winscp.
merged_prediabetes_information.to_csv(path_or_buf = '~/merged_prediabetes_information')


Using the SCU to find more prediabetic patients. There is an ICD code for prediabetic patients used, which is R73. We now want to incorporate these patients into our analysis.
First we download the epistart column and make sure we have all eid numbers from these patients. These steps are shown below.

To import 'hesin_diag.txt':
hesin_diag = pd.read_csv('~/hesin/hesin_diag.txt', sep = '\t')

To find all diabetes diagnosed patients:
prediabetes_only = hesin_diag[hesin_diag['diag_icd10'].str.contains('R73',na = False)]

To import 'hesin.txt'"
hesin_txt = pd.read_csv('~/hesin/hesin.txt', sep = '\t')

Next we cut down the number of columns in order to have a merge of only the columns we need from 'hesin.txt'"
hesin_txt_for_merge = hesin_txt[['eid', 'ins_index', 'epistart']]

We merge the dataframes together by eid and ins_index to get the final result with the dates of diagnosis:
patients_with_prediabetes_with_dates = prediabetes_only.merge(hesin_txt_for_merge, on = ['eid', 'ins_index'])

Finally we have to save this dataframe as a csv to be exported to my computer so that we can use it to compare the dates in this file to the dates of the other file 
in order to see if more patients in a prediabetic state progressed to a diabetic state:
patients_with_prediabetes_with_dates.to_csv(path_or_buf = '~/patients_with_prediabetes_with_dates')


Another thing we must look into is a different way of finding patients who develop diabetes after their prediabetic classification. 
This involves using the hesin files which includes two files we will use named 'hesin.txt' and 'hesin_diag.txt'. 
'hesin.txt' contains the dates when a patient is diagnosed with a disease, in our case type 2 diabetes. 
'hesin_diag.txt' contains the billed diagnosis of diabetes for patients using the code E11, which includes all values from E110-E119. 
E11 is defined as the diagnosis for non-insulin dependent diabetes which is type 2 diabetes. This can be found in data-coding 19 in UDI 41202-0.0. 
We can combine these files together to create one dataframe that holds all diagnoses of diabetes and the dates in which these diagnoses were made. 
We then compare the dates to those of the ones of UDI 53-0.0 which is the 
'Date of attneding assessment centre' column which contains the dates we use to diagnose prediabetic patients since this is when their samples were taken. 
If the first occurring date using the hesin text files is later than that of the csv file for a prediabetic patient, then this patient developed diabetes. 
If the diabetes diagnosis is before the date of the csv file for a prediabetic patient, 
then the patient is already classified as diabetic and must be removed from the dataframe. 
The code to create the dataframe with all dates from the hesin files is shown below.

To import 'hesin_diag.txt':
hesin_diag = pd.read_csv('~/hesin/hesin_diag.txt', sep = '\t')

To find all diabetes diagnosed patients:
type2_diabetes_only = hesin_diag[hesin_diag['diag_icd10'].str.contains('E11',na = False)]

To import 'hesin.txt'"
hesin_txt = pd.read_csv('~/hesin/hesin.txt', sep = '\t')

Next we cut down the number of columns in order to have a merge of only the columns we need from 'hesin.txt'"
hesin_txt_for_merge = hesin_txt[['eid', 'ins_index', 'epistart']]

We merge the dataframes together by eid and ins_index to get the final result with the dates of diagnosis:
patients_with_type2_diabetes_with_dates = type2_diabetes_only.merge(hesin_txt_for_merge, on = ['eid', 'ins_index'])

Finally we have to save this dataframe as a csv to be exported to my computer so that we can use it to compare the dates in this file to the dates of the other file 
in order to see if more patients in a prediabetic state progressed to a diabetic state:
patients_with_type2_diabetes_with_dates.to_csv(path_or_buf = '~/patients_with_type2_diabetes_with_dates')


Attempting to Classify More Unknown Prediabetic Patients By Finding Which Patients Were Diagnosed With Other Diseases Who We Classified As Prediabetic to 
Begin the Study - Using the SCU to get the epistart dates of all unknown patients

The assumption is that if patients are diagnosed with other diseases who we have classified as prediabetic, 
then this is a sign that they are still prediabetic because otherwise they would be diagnosed with diabetes along with the other diseases.
It is our hope that we can identify patients who we know 
do not progress to diabetes in the unknown group because they are still being checked up on by medical professionals who have not diagnosed them with diabetes. Therefore, we 
will assume that patients who are diagnosed with diseases other than diabetes towards the years close to 2021 will not have progressed to diabetes because they are still actively
being seen by the doctor and they do not have a diabetic ICD code diagnosis. 

First, we import the dataframe from Data Mining To Find Final Pre-diabetic Cohort which contains the unknown diagnosed patients.
all_prediabetes = pd.read_csv('/home/nib4003/for_winscp/prediabetic_all_possible_to_classify_keeping_all_prediabetic_patients_final')

Next, we create a list of these patients:
dfToList_all_prediabetes = all_prediabetes['eid'].tolist()

To import 'hesin_diag.txt':
hesin_diag = pd.read_csv('/athena/elementolab/scratch/nib4003/ukbiobank/hesin/hesin_diag.txt', sep = '\t')

To import 'hesin.txt':
hesin_txt = pd.read_csv('/athena/elementolab/scratch/nib4003/ukbiobank/hesin/hesin.txt', sep = '\t')

Next we cut down the number of columns in order to have a merge of only the columns we need from 'hesin.txt'"
hesin_txt_for_merge = hesin_txt[['eid', 'ins_index', 'epistart']]

Next, we keep only these patients in the hesin_diag dataframe:
hesin_txt_for_merge_prediabetics = hesin_txt_for_merge[hesin_txt_for_merge.eid.isin(dfToList_all_prediabetes)]

We merge the dataframes together by eid and ins_index to get the final result with the dates of diagnosis:
patients_with_prediabetes_with_dates = hesin_txt_for_merge_prediabetics.merge(hesin_txt_for_merge, on = ['eid', 'ins_index'])

Finally we have to save this dataframe as a csv to be exported to my computer so that we can use it to compare the dates in this file to the dates of the other file 
in order to see if more patients in a prediabetic state progressed to a diabetic state:
patients_with_prediabeties_with_dates.to_csv(path_or_buf = '~/icd_codes_and_epistart_dates_to_try_to_classify_unknown_patients')


Next we take the date of attending the assessment center, and other columns although we do not need them. We will show that there are incorrectly labeled patients in the
9754 patients we originally classified.
first_step = pd.read_csv('/athena/elementolab/scratch/nib4003/documentation_files/whole_file_26867', usecols = ['eid', '74-0.0', '74-1.0', '74-2.0', '2443-0.0', '2443-1.0', '2443-2.0', '2976-0.0', '2976-1.0', '2976-2.0', '4041-0.0', '4041-1.0', '4041-2.0', '53-0.0', '53-1.0', '53-2.0'])
all_prediabetes = pd.read_csv('/home/nib4003/for_winscp/final_cohort_of_prediabetics.csv')
first_step_only_prediabetics_at_start = first_step[first_step.eid.isin(all_prediabetes['eid'])]
first_step_only_prediabetics_at_start.to_csv(path_or_buf = '~nib4003/for_winscp/all_features_prediabetics_dates_of_attending_assessment_center.csv')


The next step is to take features from the UK Biobank that we have seen in previous literature to be used to predict T2D development. 
We first start by using Linux commands to create our 4 files that contain all the HTML features (whole_file26867, whole_file_33822, whole_file_41972, whole_file_42385). 
We next need to combine all the features with the dataframe we created of all classified prediabetic patients so that the computation does not take a long time. 
First, we import our prediabetic patient dataframe.
all_prediabetes = pd.read_csv('~/final_cohort_of_prediabetics.csv')

An additional column comes along with the above dataframe that we need to drop, shown below.
all_prediabetes = all_prediabetes.drop(columns = ['Unnamed: 0'])

Next we make a list of the eid values of the prediabetic patients at the start of the study.
dfToList_all_prediabetes = all_prediabetes['eid'].tolist()

Next we need to import the four large files with all the features. An example is shown below but we need to do this for all the files. 
This does take a long time for every file since they are so large.
first_step = pd.read_csv('~/whole_file_26867')

We can look at the new number of features using the command below.
first_step.shape

The complete list of commands for all four files is shown below (includes the previous 3):
first_step = pd.read_csv('~/whole_file_26867')
first_step.shape
second_step = pd.read_csv('~/whole_file_33822')
second_step.shape
third_step = pd.read_csv('~/whole_file_41972')
third_step.shape
fourth_step = pd.read_csv('~/whole_file_42385')
fourth_step.shape

We then keep only the patients from the first_step dataframe that match our eid numbers for the prediabetic patients.
first_step_only_prediabetics_at_start = first_step[first_step.eid.isin(dfToList_all_prediabetes)]

Fianlly we merge all the files together to get one dataframe with all the features which only contains the patients which we are able to classify into developing diabetes or not. The merge command is shown below.
all_features_prediabetics_only = first_step_only_prediabetics_at_start.merge(second_step, on = 'eid').merge(third_step, on = 'eid').merge(fourth_step, on = 'eid')

Now we finally have the whole dataframe with all the features for the prediabetic patients. 
The next step is to save the dataframe as a csv, as we have done before, in order to send it back to the desktop using WinSCP.
all_features_prediabetics_only.to_csv(path_or_buf = '~/all_features_prediabetics_only_9754_patients.csv')


The last thing we need to do is to save all the metabolomics data for our prediabetics. This is done by reading in the metabolomics data from the UKBB and keeping only the eid
numbers belonging to the prediabetics in the final_cohort_of_prediabetics.csv file. However, our metabolomic file contains the extra 190 patients who are truly diabetic 
which we originally labeled as prediabetic. We cut them out in every notebook where necessary. The code for mining the metabolomic data for our prediabetic cohorts is below.
all_prediabetes = pd.read_csv('~/final_cohort_of_prediabetics.csv')
metabolomics_data = pd.read_csv('~/metabolomics_data_from_ukbb')
prediabetics_metabolomic_info = metabolomics_data[metabolomics_data.eid.isin(all_prediabetes['eid])]
prediabetics_metabolomic_info.to_csv('~/prediabetics_with_metabolomic_and_telomere_length_data')
